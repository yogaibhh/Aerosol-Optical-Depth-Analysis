# -*- coding: utf-8 -*-
"""Statistics_AOD-PM-Rainfall

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hcc4lSip4b2J4qQYIkWJ4OYdwPTEPsRV
"""

# Install required libraries (jika diperlukan)
!pip install pandas scipy matplotlib
!pip install statsmodels
!pip install sklearn.metrics

# Install necessary libraries
!pip install pandas --upgrade
!pip install matplotlib --upgrade

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error

# Load the data from the provided Excel file
file_path = '/content/drive/MyDrive/Skripci/aeronet_combined_2020_2021_2022.xlsx'
data = pd.read_excel(file_path)

# Extract month from the Date column
data['Month'] = data['Date'].dt.month

# Define the specific months for each zenith angle category
specific_months = {
    '< 45°': [3],        # July
    '45°-75°': [7],      # March
    '> 75°': [1]         # January
}

# Create a new mapping of month to zenith category based on the specific months defined
def map_month_to_zenith_category(month):
    if month in specific_months['< 45°']:
        return '< 45°'
    elif month in specific_months['45°-75°']:
        return '45°-75°'
    elif month in specific_months['> 75°']:
        return '> 75°'
    else:
        return None

# Apply the function to create a new column for the specific zenith categories
data['Specific_Zenith_Category'] = data['Month'].apply(map_month_to_zenith_category)

# Filter the data to only include rows with a specific zenith category
specific_zenith_data = data[data['Specific_Zenith_Category'].notnull()]

# Calculate mean AOD_500nm for each specific zenith angle category
mean_aod_by_specific_zenith = specific_zenith_data.groupby('Specific_Zenith_Category')['AOD_500nm'].mean().reset_index()

# Replace the values in Specific_Zenith_Category column
mean_aod_by_specific_zenith['Specific_Zenith_Category'] = mean_aod_by_specific_zenith['Specific_Zenith_Category'].replace({
    '45°-75°': '< 45°',
    '< 45°': '45°-75°',
    '> 75°': '> 75°'
})

# Create a line chart for mean AOD_500nm across specific zenith angle categories
plt.figure(figsize=(8, 5))
plt.plot(mean_aod_by_specific_zenith['Specific_Zenith_Category'], mean_aod_by_specific_zenith['AOD_500nm'], marker='o', color='teal', linestyle='-')
plt.xlabel('Kategori Sudut Zenith Matahari')
plt.ylabel('AOD_500nm')
plt.ylim(0, max(mean_aod_by_specific_zenith['AOD_500nm']) + 0.1)  # Add some space above the highest point
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
from sklearn.metrics import mean_squared_error

# Paths to the uploaded Excel files
aeronet_data_path = '/content/drive/MyDrive/Skripci/aeronet_combined_2020_2021_2022.xlsx'  # Replace with your actual file path
environmental_data_path = '/content/drive/MyDrive/Skripci/BundaranHI2020-2022.xlsx'  # Replace with your actual file path

# Load the datasets
aeronet_data = pd.read_excel(aeronet_data_path)
environmental_data = pd.read_excel(environmental_data_path)

# Ensure 'Date' and 'Tanggal' are in datetime format
aeronet_data['Date'] = pd.to_datetime(aeronet_data['Date'])
environmental_data['Tanggal'] = pd.to_datetime(environmental_data['Tanggal'])

# Filter the datasets for the years 2020 and 2021
aeronet_2020_2021 = aeronet_data[aeronet_data['Date'].dt.year.isin([2020, 2021])]
environmental_2020_2021 = environmental_data[environmental_data['Tanggal'].dt.year.isin([2020, 2021])]

# Convert 'PM25' to numeric and handle non-numeric entries
environmental_2020_2021['PM10'] = pd.to_numeric(environmental_2020_2021['PM10'], errors='coerce')

# Merge datasets on 'Date'
merged_data_2020_2021 = pd.merge(aeronet_2020_2021, environmental_2020_2021, left_on='Date', right_on='Tanggal', how='inner')

# Drop rows with any NaN values in 'AOD_500nm' or 'PM2.5'
merged_data_2020_2021.dropna(subset=['AOD_500nm', 'PM10'], inplace=True)

# Create a new column for year-month grouping
merged_data_2020_2021['YearMonth'] = merged_data_2020_2021['Date'].dt.to_period('M')

# Group by this new 'YearMonth' and calculate mean for AOD and PM2.5
monthly_data = merged_data_2020_2021.groupby('YearMonth').agg({'AOD_500nm':'mean', 'PM10':'mean'}).reset_index()

# Convert 'YearMonth' back to datetime for plotting purposes
monthly_data['YearMonth'] = monthly_data['YearMonth'].dt.to_timestamp()

# Perform linear regression on the monthly mean data
monthly_regression_results = linregress(monthly_data['AOD_500nm'], monthly_data['PM10'])

# Calculate predicted PM2.5 values based on the regression results
monthly_predicted_pm25 = monthly_regression_results.intercept + monthly_regression_results.slope * monthly_data['AOD_500nm']

# Calculate RMSE for the monthly data predictions
monthly_rmse = np.sqrt(mean_squared_error(monthly_data['PM10'], monthly_predicted_pm25))

# Prepare regression line data for plotting
monthly_x_values = np.linspace(monthly_data['AOD_500nm'].min(), monthly_data['AOD_500nm'].max(), 100)
monthly_y_values = monthly_regression_results.intercept + monthly_regression_results.slope * monthly_x_values

# Creating the scatter plot and regression line
plt.figure(figsize=(10, 6))
plt.scatter(monthly_data['AOD_500nm'], monthly_data['PM10'], color='blue', label='Data rata-rata bulanan')
plt.plot(monthly_x_values, monthly_y_values, color='red', label='Regresi Linear')

# Annotating the plot with the regression equation, R^2, P-value, and RMSE
monthly_annotation_text = (f'y = {monthly_regression_results.slope:.4f}x + {monthly_regression_results.intercept:.4f}\n'
                           f'$R^2$ = {monthly_regression_results.rvalue**2:.4f}\n'
                           f'$p$-value = {monthly_regression_results.pvalue:.4e}\n'
                           f'RMSE = {monthly_rmse:.4f}')

# Place the annotation on the plot
plt.annotate(monthly_annotation_text, xy=(0.05, 0.95), xycoords='axes fraction', textcoords='offset points',
             fontsize=12, ha='left', va='top', bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.8))

# Setting the labels and title
plt.xlabel('AOD 500nm')
plt.ylabel('PM10 (μg/m³)')
plt.legend(loc='lower right')

plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
from sklearn.metrics import mean_squared_error

# Load the data from the provided files
bundaran_hi_df = pd.read_excel('/content/drive/MyDrive/Skripci/BundaranHI2020-2022.xlsx')
aeronet_df = pd.read_excel('/content/drive/MyDrive/Skripci/aeronet_combined_2020_2021_2022.xlsx')

# Clean and prepare the data
# Convert the date columns to datetime format
bundaran_hi_df['Tanggal'] = pd.to_datetime(bundaran_hi_df['Tanggal'])
aeronet_df['Date'] = pd.to_datetime(aeronet_df['Date'])

# Merge the dataframes based on the date column
merged_bundaran_hi_df = pd.merge(bundaran_hi_df, aeronet_df, left_on='Tanggal', right_on='Date')

# Drop rows where PM2.5 data is missing or invalid
merged_bundaran_hi_df = merged_bundaran_hi_df[merged_bundaran_hi_df['PM2.5'] != '---']
merged_bundaran_hi_df['PM2.5'] = merged_bundaran_hi_df['PM2.5'].astype(float)

# Drop rows with non-numeric values in PM10 for the correlation analysis
merged_bundaran_hi_df = merged_bundaran_hi_df[merged_bundaran_hi_df['PM10'] != '---']
merged_bundaran_hi_df['PM10'] = merged_bundaran_hi_df['PM10'].astype(float)

# Prepare the data for linear regression
merged_bundaran_hi_df = merged_bundaran_hi_df.dropna(subset=['AOD_500nm', 'PM2.5'])
x = merged_bundaran_hi_df['AOD_500nm']
y = merged_bundaran_hi_df['PM2.5']

# Perform linear regression
regression_results = linregress(x, y)

# Calculate predicted values
x_values = np.linspace(x.min(), x.max(), 100)
y_values = regression_results.slope * x_values + regression_results.intercept

# Calculate RMSE
y_pred = regression_results.slope * x + regression_results.intercept
rmse = np.sqrt(mean_squared_error(y, y_pred))

# Creating the scatter plot and regression line
plt.figure(figsize=(10, 6))
plt.scatter(x, y, color='blue', label='Data Aktual')
plt.plot(x_values, y_values, color='red', label='Regresi Linear')

# Annotating the plot with the regression equation, R^2, P-value, and RMSE
annotation_text = (f'y = {regression_results.slope:.4f}x + {regression_results.intercept:.4f}\n'
                   f'$R^2$ = {regression_results.rvalue**2:.4f}\n'
                   f'$p$-value = {regression_results.pvalue:.4e}\n'
                   f'RMSE = {rmse:.4f}')

# Place the annotation on the plot
plt.annotate(annotation_text, xy=(0.05, 0.95), xycoords='axes fraction', textcoords='offset points',
             fontsize=12, ha='left', va='top', bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.8))

# Setting the labels and title
plt.xlabel('AOD 500nm')
plt.ylabel('PM2.5 (μg/m³)')
plt.legend()

plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
from sklearn.metrics import mean_squared_error

# Load the data from the provided files
aeronet_df = pd.read_excel('/content/drive/MyDrive/AOD-CH/aeronet_combined_2020_2021_2022.xlsx')
rainfall_df = pd.read_excel('/content/drive/MyDrive/AOD-CH/BMKGCH2020-2022.xlsx')

# Clean and prepare the data
# Convert the date columns to datetime format
aeronet_df['Date'] = pd.to_datetime(aeronet_df['Date'])
rainfall_df['Tanggal'] = pd.to_datetime(rainfall_df['Tanggal'])

# Rename the columns for easier merging and consistency
rainfall_df.rename(columns={'Tanggal': 'Date', 'Curah Hujan': 'Rainfall'}, inplace=True)

# Merge the dataframes based on the date column
merged_df = pd.merge(aeronet_df, rainfall_df, on='Date')

# Drop rows where Rainfall data is missing or invalid
merged_df = merged_df.dropna(subset=['AOD_500nm', 'Rainfall'])

# Prepare the data for linear regression with Rainfall as the independent variable (x) and AOD as the dependent variable (y)
x = merged_df['Rainfall']
y = merged_df['AOD_500nm']

# Perform linear regression
regression_results = linregress(x, y)

# Calculate predicted values
x_values = np.linspace(x.min(), x.max(), 100)
y_values = regression_results.slope * x_values + regression_results.intercept

# Calculate RMSE
y_pred = regression_results.slope * x + regression_results.intercept
rmse = np.sqrt(mean_squared_error(y, y_pred))

# Creating the scatter plot and regression line
plt.figure(figsize=(10, 6))
plt.scatter(x, y, color='blue', label='Data Aktual')
plt.plot(x_values, y_values, color='red', label='Regresi Linear')

# Annotating the plot with the regression equation, R^2, P-value, and RMSE
annotation_text = (f'y = {regression_results.slope:.4f}x + {regression_results.intercept:.4f}\n'
                   f'$R^2$ = {regression_results.rvalue**2:.4f}\n'
                   f'$p$-value = {regression_results.pvalue:.4e}\n'
                   f'RMSE = {rmse:.4f}')

# Place the annotation on the plot
plt.annotate(annotation_text, xy=(0.05, 0.95), xycoords='axes fraction', textcoords='offset points',
             fontsize=12, ha='left', va='top', bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.8))

# Setting the labels and title
plt.xlabel('Curah Hujan (mm)')
plt.ylabel('AOD 500nm')
plt.legend()

plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
from sklearn.metrics import mean_squared_error

# Load the data from the provided files
aeronet_df = pd.read_excel('/content/drive/MyDrive/AOD-CH/aeronet_combined_2020_2021_2022.xlsx')
rainfall_df = pd.read_excel('/content/drive/MyDrive/AOD-CH/BMKGCH2020-2022.xlsx')

# Clean and prepare the data
# Convert the date columns to datetime format
aeronet_df['Date'] = pd.to_datetime(aeronet_df['Date'])
rainfall_df['Tanggal'] = pd.to_datetime(rainfall_df['Tanggal'])

# Rename the columns for easier merging and consistency
rainfall_df.rename(columns={'Tanggal': 'Date', 'Curah Hujan': 'Rainfall'}, inplace=True)

# Merge the dataframes based on the date column
merged_df = pd.merge(aeronet_df, rainfall_df, on='Date')

# Filter the data for the years 2020 and 2021
merged_df = merged_df[(merged_df['Date'].dt.year >= 2020) & (merged_df['Date'].dt.year <= 2021)]

# Drop rows where Rainfall data is missing or invalid
merged_df = merged_df.dropna(subset=['AOD_500nm', 'Rainfall'])

# Aggregate the data by month
merged_df['Month'] = merged_df['Date'].dt.to_period('M')
monthly_data = merged_df.groupby('Month').mean().reset_index()

# Prepare the data for linear regression with Rainfall as the independent variable (x) and AOD as the dependent variable (y)
x = monthly_data['Rainfall']
y = monthly_data['AOD_500nm']

# Perform linear regression
regression_results = linregress(x, y)

# Calculate predicted values
x_values = np.linspace(x.min(), x.max(), 100)
y_values = regression_results.slope * x_values + regression_results.intercept

# Calculate RMSE
y_pred = regression_results.slope * x + regression_results.intercept
rmse = np.sqrt(mean_squared_error(y, y_pred))

# Creating the scatter plot and regression line
plt.figure(figsize=(10, 6))
plt.scatter(x, y, color='blue', label='Data Aktual')
plt.plot(x_values, y_values, color='red', label='Regresi Linear')

# Annotating the plot with the regression equation, R^2, P-value, and RMSE
annotation_text = (f'y = {regression_results.slope:.4f}x + {regression_results.intercept:.4f}\n'
                   f'$R^2$ = {regression_results.rvalue**2:.4f}\n'
                   f'$p$-value = {regression_results.pvalue:.4e}\n'
                   f'RMSE = {rmse:.4f}')

# Place the annotation on the plot
plt.annotate(annotation_text, xy=(0.05, 0.95), xycoords='axes fraction', textcoords='offset points',
             fontsize=12, ha='left', va='top', bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.8))

# Setting the labels and title
plt.xlabel('Curah Hujan (mm)')
plt.ylabel('AOD 500nm')
plt.legend()

plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the data from the provided files
aeronet_df = pd.read_excel('/content/drive/MyDrive/AOD-CH/aeronet_combined_2020_2021_2022.xlsx')
rainfall_df = pd.read_excel('/content/drive/MyDrive/AOD-CH/BMKGCH2020-2022.xlsx')

# Clean and prepare the data
# Convert the date columns to datetime format
aeronet_df['Date'] = pd.to_datetime(aeronet_df['Date'])
rainfall_df['Tanggal'] = pd.to_datetime(rainfall_df['Tanggal'])

# Rename the columns for easier merging and consistency
rainfall_df.rename(columns={'Tanggal': 'Date', 'Curah Hujan': 'Rainfall'}, inplace=True)

# Merge the dataframes based on the date column
merged_df = pd.merge(aeronet_df, rainfall_df, on='Date')

# Filter the data for the years 2020 and 2021
merged_df = merged_df[(merged_df['Date'].dt.year >= 2020) & (merged_df['Date'].dt.year <= 2021)]

# Drop rows where Rainfall or AOD data is missing or invalid
merged_df = merged_df.dropna(subset=['AOD_500nm', 'Rainfall'])

# Define a function to identify 4 consecutive days of rain or no rain
def identify_consecutive_days(data, condition, n=4):
    data['Condition'] = condition
    data['Consecutive'] = data['Condition'].rolling(window=n, min_periods=n).apply(lambda x: x.sum() == n, raw=True).shift(-(n-1))
    return data

# Identify 4 consecutive days of rain
rain_condition = merged_df['Rainfall'] > 0
rain_data = identify_consecutive_days(merged_df.copy(), rain_condition)

# Identify 4 consecutive days of no rain
no_rain_condition = merged_df['Rainfall'] == 0
no_rain_data = identify_consecutive_days(merged_df.copy(), no_rain_condition)

# Filter only the consecutive days
consecutive_rain_data = rain_data[rain_data['Consecutive'] == 1]
consecutive_no_rain_data = no_rain_data[no_rain_data['Consecutive'] == 1]

# Calculate the mean AOD for each date in consecutive rainy and non-rainy days
plot_data_rainy = consecutive_rain_data.groupby('Date')['AOD_500nm'].mean().reset_index()
plot_data_non_rainy = consecutive_no_rain_data.groupby('Date')['AOD_500nm'].mean().reset_index()

# Calculate the overall means for both non-rainy and rainy periods
mean_non_rainy = plot_data_non_rainy['AOD_500nm'].mean()
mean_rainy = plot_data_rainy['AOD_500nm'].mean()

# Plotting with average lines
plt.figure(figsize=(12, 6))
plt.plot(plot_data_non_rainy['Date'], plot_data_non_rainy['AOD_500nm'], label='Non-Rainy AOD_500nm', marker='o')
plt.plot(plot_data_rainy['Date'], plot_data_rainy['AOD_500nm'], label='Rainy AOD_500nm', marker='x')

# Add average lines
plt.axhline(y=mean_non_rainy, color='blue', linestyle='--', label=f'Average Non-Rainy AOD_500nm ({mean_non_rainy:.2f})')
plt.axhline(y=mean_rainy, color='red', linestyle='--', label=f'Average Rainy AOD_500nm ({mean_rainy:.2f})')

plt.xlabel('Date')
plt.ylabel('AOD_500nm')
plt.legend()
plt.title('Mean AOD during 4 Consecutive Rainy and Non-Rainy Days')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the data from the provided files
aeronet_df = pd.read_excel('/content/drive/MyDrive/AOD-CH/aeronet_combined_2020_2021_2022.xlsx')
rainfall_df = pd.read_excel('/content/drive/MyDrive/AOD-CH/BMKGCH2020-2022.xlsx')


# Clean and prepare the data
# Convert the date columns to datetime format
aeronet_df['Date'] = pd.to_datetime(aeronet_df['Date'])
rainfall_df['Tanggal'] = pd.to_datetime(rainfall_df['Tanggal'])

# Rename the columns for easier merging and consistency
rainfall_df.rename(columns={'Tanggal': 'Date', 'Curah Hujan': 'Rainfall'}, inplace=True)

# Merge the dataframes based on the date column
merged_df = pd.merge(aeronet_df, rainfall_df, on='Date')

# Filter the data for the years 2020 and 2021
merged_df = merged_df[(merged_df['Date'].dt.year >= 2020) & (merged_df['Date'].dt.year <= 2021)]

# Drop rows where Rainfall or AOD data is missing or invalid
merged_df = merged_df.dropna(subset=['AOD_500nm', 'Rainfall'])

# Define a function to identify 2 consecutive days of rain or no rain
def identify_consecutive_days(data, condition, n=2):
    data['Condition'] = condition
    data['Consecutive'] = data['Condition'].rolling(window=n, min_periods=n).apply(lambda x: x.sum() == n, raw=True).shift(-(n-1))
    return data

# Identify 2 consecutive days of rain
rain_condition = merged_df['Rainfall'] > 0
rain_data = identify_consecutive_days(merged_df.copy(), rain_condition, n=2)

# Identify 2 consecutive days of no rain
no_rain_condition = merged_df['Rainfall'] == 0
no_rain_data = identify_consecutive_days(merged_df.copy(), no_rain_condition, n=2)

# Filter only the consecutive days
consecutive_rain_data = rain_data[rain_data['Consecutive'] == 1]
consecutive_no_rain_data = no_rain_data[no_rain_data['Consecutive'] == 1]

# Calculate the mean AOD for each date in consecutive rainy and non-rainy days
plot_data_rainy = consecutive_rain_data.groupby('Date')['AOD_500nm'].mean().reset_index()
plot_data_non_rainy = consecutive_no_rain_data.groupby('Date')['AOD_500nm'].mean().reset_index()

# Calculate the overall means for both non-rainy and rainy periods
mean_non_rainy = plot_data_non_rainy['AOD_500nm'].mean()
mean_rainy = plot_data_rainy['AOD_500nm'].mean()

# Plotting with average lines
plt.figure(figsize=(12, 6))
plt.plot(plot_data_non_rainy['Date'], plot_data_non_rainy['AOD_500nm'], label='Non-Rainy AOD_500nm', marker='o')
plt.plot(plot_data_rainy['Date'], plot_data_rainy['AOD_500nm'], label='Rainy AOD_500nm', marker='x')

# Add average lines
plt.axhline(y=mean_non_rainy, color='blue', linestyle='--', label=f'Average Non-Rainy AOD_500nm ({mean_non_rainy:.2f})')
plt.axhline(y=mean_rainy, color='red', linestyle='--', label=f'Average Rainy AOD_500nm ({mean_rainy:.2f})')

plt.xlabel('Date')
plt.ylabel('AOD_500nm')
plt.legend()
plt.title('Mean AOD during 2 Consecutive Rainy and Non-Rainy Days')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import linregress

# Load the data from the provided Excel files
aeronet_data_path = '/content/drive/MyDrive/Skripci/aeronet_combined_2020_2021_2022.xlsx'
pm10_data_path = '/content/drive/MyDrive/Skripci/BundaranHI2020-2022.xlsx'

aeronet_data = pd.read_excel(aeronet_data_path)
pm10_data = pd.read_excel(pm10_data_path)

# Convert date columns to datetime
aeronet_data['Date'] = pd.to_datetime(aeronet_data['Date'])
pm10_data['Tanggal'] = pd.to_datetime(pm10_data['Tanggal'])

# Filter data for the dry months (May to September) for the years 2020 and 2021
dry_months = [5, 6, 7, 8, 9]
aeronet_dry = aeronet_data[(aeronet_data['Date'].dt.month.isin(dry_months)) &
                           (aeronet_data['Date'].dt.year.isin([2020, 2021]))]
pm10_dry = pm10_data[(pm10_data['Tanggal'].dt.month.isin(dry_months)) &
                     (pm10_data['Tanggal'].dt.year.isin([2020, 2021]))]

# Merge datasets on the date columns
merged_data = pd.merge(aeronet_dry, pm10_dry, left_on='Date', right_on='Tanggal')

# Extract relevant columns for plotting
aod_500nm = merged_data['AOD_500nm']
pm10 = merged_data['PM10']

# Perform linear regression
slope, intercept, r_value, p_value, std_err = linregress(aod_500nm, pm10)

# Calculate RMSE
rmse = ((pm10 - (slope * aod_500nm + intercept))**2).mean()**0.5

# Plot the scatter plot with the regression line and annotations
plt.figure(figsize=(10, 6))
plt.scatter(aod_500nm, pm10, color='blue', label='Data Aktual')
plt.plot(aod_500nm, intercept + slope * aod_500nm, color='red', label='Regresi Linear')

# Annotation text
annotation_text = (f'y = {slope:.4f}x + {intercept:.4f}\n'
                   f'$R^2$ = {r_value**2:.4f}\n'
                   f'$p$-value = {p_value:.4e}\n'
                   f'RMSE = {rmse:.4f}')

# Place the annotation on the plot
plt.annotate(annotation_text, xy=(0.05, 0.95), xycoords='axes fraction', textcoords='offset points',
             fontsize=12, ha='left', va='top', bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.8))

plt.xlabel('AOD 500nm')
plt.ylabel('PM10 (μg/m³)')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import linregress

# Load the data from the provided Excel files
aeronet_data_path = '/content/drive/MyDrive/Skripci/aeronet_combined_2020_2021_2022.xlsx'
pm10_data_path = '/content/drive/MyDrive/Skripci/BundaranHI2020-2022.xlsx'

aeronet_data = pd.read_excel(aeronet_data_path)
pm10_data = pd.read_excel(pm10_data_path)

# Convert date columns to datetime
aeronet_data['Date'] = pd.to_datetime(aeronet_data['Date'])
pm10_data['Tanggal'] = pd.to_datetime(pm10_data['Tanggal'])

# Filter data for the dry months (May to September) for the years 2020 and 2021
dry_months = [5, 6, 7, 8, 9]
aeronet_dry = aeronet_data[(aeronet_data['Date'].dt.month.isin(dry_months)) &
                           (aeronet_data['Date'].dt.year.isin([2020, 2021]))]
pm10_dry = pm10_data[(pm10_data['Tanggal'].dt.month.isin(dry_months)) &
                     (pm10_data['Tanggal'].dt.year.isin([2020, 2021]))]

# Merge datasets on the date columns
merged_data = pd.merge(aeronet_dry, pm10_dry, left_on='Date', right_on='Tanggal')

# Extract relevant columns for plotting AOD 500nm vs PM2.5
aod_500nm = merged_data['AOD_500nm']
pm25 = merged_data['PM2.5']

# Perform linear regression for AOD 500nm vs PM2.5
slope_pm25, intercept_pm25, r_value_pm25, p_value_pm25, std_err_pm25 = linregress(aod_500nm, pm25)

# Calculate RMSE for PM2.5
rmse_pm25 = ((pm25 - (slope_pm25 * aod_500nm + intercept_pm25))**2).mean()**0.5

# Plot the scatter plot with the regression line and annotations for AOD 500nm vs PM2.5
plt.figure(figsize=(10, 6))
plt.scatter(aod_500nm, pm25, color='blue', label='Data Aktual')
plt.plot(aod_500nm, intercept_pm25 + slope_pm25 * aod_500nm, color='red', label='Regresi Linear')

# Annotation text for PM2.5
annotation_text_pm25 = (f'y = {slope_pm25:.4f}x + {intercept_pm25:.4f}\n'
                        f'$R^2$ = {r_value_pm25**2:.4f}\n'
                        f'$p$-value = {p_value_pm25:.4e}\n'
                        f'RMSE = {rmse_pm25:.4f}')

# Place the annotation on the plot
plt.annotate(annotation_text_pm25, xy=(0.05, 0.95), xycoords='axes fraction', textcoords='offset points',
             fontsize=12, ha='left', va='top', bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.8))

plt.xlabel('AOD 500nm')
plt.ylabel('PM2.5 (μg/m³)')
plt.legend()
plt.grid(False)
plt.show()